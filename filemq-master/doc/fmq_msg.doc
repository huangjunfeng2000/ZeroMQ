#### fmq_msg - The FileMQ Protocol

fmq_msg - The FileMQ Protocol

Please add @discuss section in ../src/fmq_msg.c.

This is the class interface:

    //  Create a new empty fmq_msg
    fmq_msg_t *
        fmq_msg_new (void);
    
    //  Destroy a fmq_msg instance
    void
        fmq_msg_destroy (fmq_msg_t **self_p);
    
    //  Receive a fmq_msg from the socket. Returns 0 if OK, -1 if
    //  there was an error. Blocks if there is no message waiting.
    int
        fmq_msg_recv (fmq_msg_t *self, zsock_t *input);
    
    //  Send the fmq_msg to the output socket, does not destroy it
    int
        fmq_msg_send (fmq_msg_t *self, zsock_t *output);
        
    //  Print contents of message to stdout
    void
        fmq_msg_print (fmq_msg_t *self);
    
    //  Get/set the message routing id
    zframe_t *
        fmq_msg_routing_id (fmq_msg_t *self);
    void
        fmq_msg_set_routing_id (fmq_msg_t *self, zframe_t *routing_id);
    
    //  Get the fmq_msg id and printable command
    int
        fmq_msg_id (fmq_msg_t *self);
    void
        fmq_msg_set_id (fmq_msg_t *self, int id);
    const char *
        fmq_msg_command (fmq_msg_t *self);
    
    //  Get/set the path field
    const char *
        fmq_msg_path (fmq_msg_t *self);
    void
        fmq_msg_set_path (fmq_msg_t *self, const char *value);
    
    //  Get a copy of the options field
    zhash_t *
        fmq_msg_options (fmq_msg_t *self);
    //  Get the options field and transfer ownership to caller
    zhash_t *
        fmq_msg_get_options (fmq_msg_t *self);
    //  Set the options field, transferring ownership from caller
    void
        fmq_msg_set_options (fmq_msg_t *self, zhash_t **hash_p);
    
    //  Get a copy of the cache field
    zhash_t *
        fmq_msg_cache (fmq_msg_t *self);
    //  Get the cache field and transfer ownership to caller
    zhash_t *
        fmq_msg_get_cache (fmq_msg_t *self);
    //  Set the cache field, transferring ownership from caller
    void
        fmq_msg_set_cache (fmq_msg_t *self, zhash_t **hash_p);
    
    //  Get/set the credit field
    uint64_t
        fmq_msg_credit (fmq_msg_t *self);
    void
        fmq_msg_set_credit (fmq_msg_t *self, uint64_t credit);
    
    //  Get/set the sequence field
    uint64_t
        fmq_msg_sequence (fmq_msg_t *self);
    void
        fmq_msg_set_sequence (fmq_msg_t *self, uint64_t sequence);
    
    //  Get/set the operation field
    byte
        fmq_msg_operation (fmq_msg_t *self);
    void
        fmq_msg_set_operation (fmq_msg_t *self, byte operation);
    
    //  Get/set the filename field
    const char *
        fmq_msg_filename (fmq_msg_t *self);
    void
        fmq_msg_set_filename (fmq_msg_t *self, const char *value);
    
    //  Get/set the offset field
    uint64_t
        fmq_msg_offset (fmq_msg_t *self);
    void
        fmq_msg_set_offset (fmq_msg_t *self, uint64_t offset);
    
    //  Get/set the eof field
    byte
        fmq_msg_eof (fmq_msg_t *self);
    void
        fmq_msg_set_eof (fmq_msg_t *self, byte eof);
    
    //  Get a copy of the headers field
    zhash_t *
        fmq_msg_headers (fmq_msg_t *self);
    //  Get the headers field and transfer ownership to caller
    zhash_t *
        fmq_msg_get_headers (fmq_msg_t *self);
    //  Set the headers field, transferring ownership from caller
    void
        fmq_msg_set_headers (fmq_msg_t *self, zhash_t **hash_p);
    
    //  Get a copy of the chunk field
    zchunk_t *
        fmq_msg_chunk (fmq_msg_t *self);
    //  Get the chunk field and transfer ownership to caller
    zchunk_t *
        fmq_msg_get_chunk (fmq_msg_t *self);
    //  Set the chunk field, transferring ownership from caller
    void
        fmq_msg_set_chunk (fmq_msg_t *self, zchunk_t **chunk_p);
    
    //  Get/set the reason field
    const char *
        fmq_msg_reason (fmq_msg_t *self);
    void
        fmq_msg_set_reason (fmq_msg_t *self, const char *value);
    
    //  Self test of this class
    int
        fmq_msg_test (bool verbose);

This is the class self test code:

    //  Simple create/destroy test
    fmq_msg_t *self = fmq_msg_new ();
    assert (self);
    fmq_msg_destroy (&self);
    
    //  Create pair of sockets we can send through
    zsock_t *input = zsock_new (ZMQ_ROUTER);
    assert (input);
    zsock_connect (input, "inproc://selftest-fmq_msg");
    
    zsock_t *output = zsock_new (ZMQ_DEALER);
    assert (output);
    zsock_bind (output, "inproc://selftest-fmq_msg");
    
    //  Encode/send/decode and verify each message type
    int instance;
    self = fmq_msg_new ();
    fmq_msg_set_id (self, FMQ_MSG_OHAI);
    
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
    }
    fmq_msg_set_id (self, FMQ_MSG_OHAI_OK);
    
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
    }
    fmq_msg_set_id (self, FMQ_MSG_ICANHAZ);
    
    fmq_msg_set_path (self, "Life is short but Now lasts for ever");
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
        assert (streq (fmq_msg_path (self), "Life is short but Now lasts for ever"));
    }
    fmq_msg_set_id (self, FMQ_MSG_ICANHAZ_OK);
    
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
    }
    fmq_msg_set_id (self, FMQ_MSG_NOM);
    
    fmq_msg_set_credit (self, 123);
    fmq_msg_set_sequence (self, 123);
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
        assert (fmq_msg_credit (self) == 123);
        assert (fmq_msg_sequence (self) == 123);
    }
    fmq_msg_set_id (self, FMQ_MSG_CHEEZBURGER);
    
    fmq_msg_set_sequence (self, 123);
    fmq_msg_set_operation (self, 123);
    fmq_msg_set_filename (self, "Life is short but Now lasts for ever");
    fmq_msg_set_offset (self, 123);
    fmq_msg_set_eof (self, 123);
    zchunk_t *cheezburger_chunk = zchunk_new ("Captcha Diem", 12);
    fmq_msg_set_chunk (self, &cheezburger_chunk);
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
        assert (fmq_msg_sequence (self) == 123);
        assert (fmq_msg_operation (self) == 123);
        assert (streq (fmq_msg_filename (self), "Life is short but Now lasts for ever"));
        assert (fmq_msg_offset (self) == 123);
        assert (fmq_msg_eof (self) == 123);
        assert (memcmp (zchunk_data (fmq_msg_chunk (self)), "Captcha Diem", 12) == 0);
    }
    fmq_msg_set_id (self, FMQ_MSG_HUGZ);
    
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
    }
    fmq_msg_set_id (self, FMQ_MSG_HUGZ_OK);
    
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
    }
    fmq_msg_set_id (self, FMQ_MSG_KTHXBAI);
    
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
    }
    fmq_msg_set_id (self, FMQ_MSG_SRSLY);
    
    fmq_msg_set_reason (self, "Life is short but Now lasts for ever");
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
        assert (streq (fmq_msg_reason (self), "Life is short but Now lasts for ever"));
    }
    fmq_msg_set_id (self, FMQ_MSG_RTFM);
    
    fmq_msg_set_reason (self, "Life is short but Now lasts for ever");
    //  Send twice
    fmq_msg_send (self, output);
    fmq_msg_send (self, output);
    
    for (instance = 0; instance < 2; instance++) {
        fmq_msg_recv (self, input);
        assert (fmq_msg_routing_id (self));
        assert (streq (fmq_msg_reason (self), "Life is short but Now lasts for ever"));
    }
    
    fmq_msg_destroy (&self);
    zsock_destroy (&input);
    zsock_destroy (&output);

